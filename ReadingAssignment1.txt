Microservices seminar
Reading assignment 1
Dean Roos

I think this article was interesting because it showcased both the pros and cons of microservices and microservice architecture. Through the first two lectures it seemed more and more apparent that microservices should always win out over a monolithic model for a business software solution, this goes more into details on parts we haven’t covered yet. This includes the complexity of microservice architecture, and the higher-level operational costs when it comes to team and code management. 

To recap the article, it goes in depth explaining the concepts of microserves, which are independently deployable and scalable code components which handle singular pieces of business logic. The goal, according to the article, is not necessarily to make the microservices as small as possible, but rather to make them as agile as possible which contributes to the project’s ability to achieve continuous delivery. It then describes the spectrum of granularity from microservice to miniservice to macroservice, where the dependency of the parts of the process increases from one to the other, but a single operation could consist of many of these combined. I found these two visual aids for these concepts to be very clear and helpful to understanding this concept.

Also very helpful was the list of things that are commonly misconstrued as microservices. Still not having real experience with the concept, just general knowledge, I was definitely conflating microservices with reusable services and software components. These are square/rectangle type relationships where microservices share characteristics of these things, but these things are not the same thing. I also really appreciated the illustration of internal vs external API and how the API should only be exposed to the immediate context in which it is being used. This gives me a better idea of the process and concepts behind microservice architecture and the image helps. 

I thought the conversation about the process of a company adopting microservice architecture was interesting, especially because this article is only 4-5 years old. I can appreciate how it must have been difficult for those overseeing the transition to work on training and adjusting the entire company’s viewpoint on their company’s infrastructure. With how disruptive this is, I can only imagine how that is amplified for some of the example companies listed which are so large with so many users who rely on these companies like Uber, Twitter, and Amazon. Like I mentioned in the first paragraph, the next section on risks I thought was interesting. I like that they give an explicit warning about all sorts of service providers who claim to support microservices but don’t truly understand what that means. 

The complex discussion of how to determine if microservice architecture is right for your company and then the general pathway to implementing it was also enlightening. The illustration showing how you have to methodically break your monolithic architecture down from a monolith to macroservices to miniservices and then finally to microservices is interesting to me, but it does ultimately make sense that it would be more difficult to try to start from scratch or to try to immediately jump from a monolith to microservices.

I feel that this article has given me a much better idea of not only what comprises microservice architecture, but the impacts it would have from a company perspective and it gives me a better perspective of what these large companies went through not only in how their company’s technology is structured but the decision and eventual implementation process of the switch to microservice architecture. It seems interesting that you almost need to have a large monolith already to move into microservices because microservices seem to be too expensive in man power to implement for a startup.


Google doc for easier viewing: https://docs.google.com/document/d/1cBOp1KnDMSwLwNYY2wTFCse2Ie9v3wdRIi5GnjrYJCE/edit?usp=sharing

Dean Roos
